import re
from aiogram import F, Bot, Router
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config import PLATFORMS, CHANNEL_ID, CHANNEL_LINK, SUPPORT_LINK, NEURAL_NETWORK_POST
from handlers.instagram import handle_instagram
from handlers.vk import handle_vk_post
from handlers.video import handle_video_download
from handlers.vk_video import handle_vk_video_download
import logging
from datetime import datetime, timedelta
import redis
import json

logger = logging.getLogger(__name__)
router = Router()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
redis_client = redis.StrictRedis(host='localhost', port=6379, db=0)

def is_user_allowed(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ.
    –ù–µ –±–æ–ª–µ–µ 2 —Å–∫–∞—á–∏–≤–∞–Ω–∏–π –∑–∞ 10 –º–∏–Ω—É—Ç.
    """
    key = f"user:{user_id}:downloads"
    now = datetime.now()
    ten_minutes_ago = now - timedelta(minutes=5)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π
    downloads = redis_client.lrange(key, 0, -1)
    downloads = [datetime.fromisoformat(d.decode()) for d in downloads]

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç
    recent_downloads = [d for d in downloads if d >= ten_minutes_ago]

    if len(recent_downloads) >= 2:
        return False

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
    redis_client.rpush(key, now.isoformat())
    redis_client.expire(key, 600)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TTL –Ω–∞ 10 –º–∏–Ω—É—Ç
    return True

class UserState(StatesGroup):
    waiting_instagram = State()
    waiting_vk = State()
    waiting_youtube = State()

def get_main_inline_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="Instagram", callback_data="platform_instagram"),
                InlineKeyboardButton(text="VKontakte", callback_data="platform_vk"),
                InlineKeyboardButton(text="Youtube", callback_data="platform_youtube")
            ],
            [
                InlineKeyboardButton(text="–ù–µ–π—Ä–æ—Å–µ—Ç–∏", url=NEURAL_NETWORK_POST),
                InlineKeyboardButton(text="–¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞", url=SUPPORT_LINK)
            ]
        ]
    )

def get_back_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
    )

async def check_subscription(user_id: int, bot: Bot):
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {str(e)}")
        return True  # –†–∞–∑—Ä–µ—à–∞–µ–º —Ä–∞–±–æ—Ç—É –µ—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω

@router.message(Command("start"))
async def start(message: Message, bot: Bot, state: FSMContext):
    await state.clear()
    
    if not await check_subscription(message.from_user.id, bot):
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)],
                [InlineKeyboardButton(text="–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data="check_subscription")]
            ]
        )
        await message.answer(
            """–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ –°–µ–π–≤–µ—Ä - –±–æ—Ç —É–º–µ–µ—Ç —Å–∫–∞—á–∏–≤–∞—Ç—å –ª—é–±–æ–µ –≤–∏–¥–µ–æ –∏–∑ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π –≤ HD –∫–∞—á–µ—Å—Ç–≤–µ! 
–ü–æ—Å–∫–æ–ª—å–∫—É –±–æ—Ç —Å –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π  - –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –Ω–∞–≤—Å–µ–≥–¥–∞üëáüèΩ""",
            reply_markup=keyboard
        )
        return
    
    await show_main_menu(message)

async def show_main_menu(message: Message):
    await message.answer(
        "üì• –Ø —É–º–µ—é —Å–∫–∞—á–∏–≤–∞—Ç—å –≤–∏–¥–µ–æ –∏–∑ Instagram, VKontakte, Youtube –±–µ–∑ –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ - HD –≤ –ª—É—á—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ.\n\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ü—Å–µ—Ç—å - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É - –ø–æ–ª—É—á–∏—Ç–µ –≤–∏–¥–µ–æ.\n\n"
        "(–¢–∞–∫–∂–µ —É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏ –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–µ–∫—Å—Ç, –º—É–∑—ã–∫—É, –≥—Ä–∞—Ñ–∏–∫—É –∏ –¥—Äüòº)",
        reply_markup=get_main_inline_keyboard()
    )

@router.callback_query(F.data == "check_subscription")
async def check_subscription_callback(callback: CallbackQuery, bot: Bot):
    if await check_subscription(callback.from_user.id, bot):
        await callback.message.delete()
        await show_main_menu(callback.message)
    else:
        await callback.answer("–í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)

@router.callback_query(F.data.startswith("platform_"))
async def platform_button_handler(callback: CallbackQuery, state: FSMContext):
    platform = callback.data.split("_")[1]
    
    if platform == "instagram":
        await state.set_state(UserState.waiting_instagram)
        text = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–∑ Instagram –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è üëá"
    elif platform == "vk":
        await state.set_state(UserState.waiting_vk)
        text = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–∑ VKontakte –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è üëá"
    elif platform == "youtube":
        await state.set_state(UserState.waiting_youtube)
        text = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–∑ Youtube –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è üëá"
    else:
        await callback.answer()
        return
    
    await callback.message.edit_text(
        text,
        reply_markup=get_back_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "back_to_main")
async def back_to_main_handler(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await show_main_menu(callback.message)
    await callback.answer()

@router.message(UserState.waiting_instagram, F.text)
async def handle_instagram_link(message: Message, bot: Bot, state: FSMContext):

    if not is_user_allowed(message.from_user.id):
        await message.answer(
            "–í—ã –ø—Ä–∏–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–π. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 300 —Å–µ–∫ –∏ –≤–∞—à –ª–∏–º–∏—Ç –±—É–¥–µ—Ç —Å–Ω–æ–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ωüëåüèª",
            reply_markup=get_back_keyboard()
        )
        return
    
    url = message.text.strip()
    if not re.search(PLATFORMS["instagram"], url, re.IGNORECASE):
        await message.answer(
            "–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É Instagram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_back_keyboard()
        )
        return
    
    await state.clear()
    await handle_instagram(message, url, bot)
    await show_main_menu(message)

@router.message(UserState.waiting_vk, F.text)
async def handle_vk_link(message: Message, bot: Bot, state: FSMContext):
    if not is_user_allowed(message.from_user.id):
        await message.answer(
            "–í—ã –ø—Ä–∏–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–π. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 300 —Å–µ–∫ –∏ –≤–∞—à –ª–∏–º–∏—Ç –±—É–¥–µ—Ç —Å–Ω–æ–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ωüëåüèª",
            reply_markup=get_back_keyboard()
        )
        return
    
    url = message.text.strip()
    if not re.search(PLATFORMS["vk"], url, re.IGNORECASE):
        await message.answer(
            "–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É VK. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_back_keyboard()
        )
        return
    
    await state.clear()
    if any(p in url for p in ['/clip']):
        await handle_vk_video_download(message, url, bot)
    elif any(p in url for p in ['wall-', '?w=wall']):
        await handle_vk_post(message, url)
    else:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–ª–∏ –ø–æ—Å—Ç VK")
    
    await show_main_menu(message)

@router.message(UserState.waiting_youtube, F.text)
async def handle_youtube_link(message: Message, bot: Bot, state: FSMContext):
    if not is_user_allowed(message.from_user.id):
        await message.answer(
            "–í—ã –ø—Ä–∏–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–π. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 300 —Å–µ–∫ –∏ –≤–∞—à –ª–∏–º–∏—Ç –±—É–¥–µ—Ç —Å–Ω–æ–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ωüëåüèª",
            reply_markup=get_back_keyboard()
        )
        return
    
    url = message.text.strip()
    if not re.search(PLATFORMS["youtube"], url, re.IGNORECASE):
        await message.answer(
            "–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É YouTube. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_back_keyboard()
        )
        return
    
    await state.clear()
    await handle_video_download(message, url, bot)
    await show_main_menu(message)

def register_base_handlers(dp):
    dp.include_router(router)
    