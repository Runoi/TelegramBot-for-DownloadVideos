from aiogram.types import Message, BufferedInputFile
from services.instagram import InstagramDownloader
from config import DOWNLOAD_DIR, MAX_FILE_SIZE
import os
import logging
import asyncio

logger = logging.getLogger(__name__)

downloader = InstagramDownloader()

async def handle_instagram(message: Message, url: str):
    """–§–∏–Ω–∞–ª—å–Ω–∞—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
    try:
        status_msg = await message.answer("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∫–æ–Ω—Ç–µ–Ω—Ç...")
        
        files, status = await downloader.download_content(url)  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å error –Ω–∞ status
        
        # –£—Å–ø–µ—à–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞, –Ω–æ —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç
        if status == "Download successful" and not files:
            logger.error(f"–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°—Ç–∞—Ç—É—Å: {status}")
            await message.answer("‚ö†Ô∏è –ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–æ —Ñ–∞–π–ª—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
            return
            
        # –†–µ–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        if status != "Download successful":
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {status}")
            return

        # –£—Å–ø–µ—à–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
        success_count = 0
        for file_path in files:
            try:
                if await send_media_file(message, file_path):
                    success_count += 1
            finally:
                await safe_remove_file(file_path)

        # –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è
        await message.bot.delete_message(message.chat.id, status_msg.message_id)
        if success_count == 0:
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")

    except Exception as e:
        logger.critical(f"FATAL ERROR: {str(e)}", exc_info=True)
        await message.answer("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

async def send_media_file(message: Message, file_path: str) -> bool:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —Ä–∞–∑–º–µ—Ä–∞"""
    if not os.path.exists(file_path):
        logger.warning(f"–§–∞–π–ª –∏—Å—á–µ–∑: {file_path}")
        return False

    file_size = os.path.getsize(file_path) / 1024 / 1024  # MB
    if file_size > MAX_FILE_SIZE:
        await message.answer(
            f"üì¶ –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({file_size:.1f}MB > {MAX_FILE_SIZE}MB)\n"
            f"–ò–º—è: {os.path.basename(file_path)}"
        )
        return False

    try:
        with open(file_path, "rb") as f:
            file_data = f.read()
            filename = os.path.basename(file_path)
            
            if filename.lower().endswith(('.mp4', '.mov')):
                await message.answer_video(BufferedInputFile(file_data, filename))
            else:
                await message.answer_photo(BufferedInputFile(file_data, filename))
            
            return True
            
    except Exception as e:
        logger.error(f"Send failed: {file_path} - {str(e)}")
        return False

async def safe_remove_file(path: str):
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
    try:
        if path and os.path.exists(path):
            os.remove(path)
    except Exception as e:
        logger.error(f"File removal error: {path} - {str(e)}")
    