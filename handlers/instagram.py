from aiogram.types import Message, BufferedInputFile, InputMediaPhoto, InputMediaVideo
from services.instagram import InstagramDownloader
from config import DOWNLOAD_DIR, MAX_FILE_SIZE, MAX_TELEGRAM_VIDEO_SIZE
import os
import logging
import asyncio
from aiogram import Bot

logger = logging.getLogger(__name__)

downloader = InstagramDownloader()

async def handle_instagram(message: Message, url: str, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Instagram —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞ –∫ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–µ"""
    try:
        status_msg = await message.answer("üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ (–¥–æ 500 —Å–µ–∫.)..")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        content_type = "–∫–æ–Ω—Ç–µ–Ω—Ç"
        if '/stories/' in url:
            content_type = "—Å—Ç–æ—Ä–∏—Å"
        elif '/reel/' in url:
            content_type = "—Ä–∏–ª—Å"
        elif '/p/' in url:
            content_type = "–ø–æ—Å—Ç"
        elif '/tv/' in url:
            content_type = "IGTV"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        result, status = await downloader.download_content(url, merge_all=False)
        
        if not result['media']:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {status}")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –±–æ—Ç–∞
        caption_text = f"–í–∞—à {content_type} –≥–æ—Ç–æ–≤! @prorusaver_bot"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ —Å —Ç–µ–∫—Å—Ç–æ–º
        photos = [f for f in result['media'] if f.lower().endswith(('.jpg', '.jpeg', '.png'))]
        videos = [f for f in result['media'] if f.lower().endswith(('.mp4', '.mov'))]
        
        # –î–ª—è —Ñ–æ—Ç–æ (–≤—Å—è –≥—Ä—É–ø–ø–∞ —Å —Ç–µ–∫—Å—Ç–æ–º)
        if photos:
            try:
                media_group = [
                    InputMediaPhoto(
                        media=BufferedInputFile(
                            open(photo, 'rb').read(),
                            filename=os.path.basename(photo)
                        )
                    ) for photo in photos
                ]
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –≥—Ä—É–ø–ø—ã
                media_group[0].caption = caption_text
                
                await bot.send_media_group(
                    chat_id=message.chat.id,
                    media=media_group
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {str(e)}")
                # Fallback: –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ –æ–¥–Ω–æ–º—É
                for i, photo in enumerate(photos):
                    try:
                        with open(photo, 'rb') as f:
                            await bot.send_photo(
                                chat_id=message.chat.id,
                                photo=BufferedInputFile(f.read(), os.path.basename(photo)),
                                caption=caption_text if i == 0 else None
                            )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ {photo}: {str(e)}")
                    finally:
                        await downloader._safe_remove_file(photo)
        
        # –î–ª—è –≤–∏–¥–µ–æ (–≤—Å—è –≥—Ä—É–ø–ø–∞ —Å —Ç–µ–∫—Å—Ç–æ–º)
        if videos:
            try:
                media_group = [
                    InputMediaVideo(
                        media=BufferedInputFile(
                            open(video, 'rb').read(),
                            filename=os.path.basename(video)
                        )
                    ) for video in videos
                ]
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –≥—Ä—É–ø–ø—ã
                media_group[0].caption = caption_text
                
                await bot.send_media_group(
                    chat_id=message.chat.id,
                    media=media_group
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: {str(e)}")
                # Fallback: –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ –æ–¥–Ω–æ–º—É
                for i, video in enumerate(videos):
                    try:
                        with open(video, 'rb') as f:
                            await bot.send_video(
                                chat_id=message.chat.id,
                                video=BufferedInputFile(f.read(), os.path.basename(video)),
                                caption=caption_text if i == 0 else None
                            )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ {video}: {str(e)}")
                    finally:
                        await downloader._safe_remove_file(video)
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        for file in result['media']:
            await downloader._safe_remove_file(file)
        if result['text']:
            await downloader._safe_remove_file(result['text'][0])
        
        await bot.delete_message(message.chat.id, status_msg.message_id)
        
    except Exception as e:
        logger.critical(f"Fatal error: {str(e)}", exc_info=True)
        await message.answer("üí• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")

async def _send_photos_as_group(message: Message, photo_paths: list, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä—É–ø–ø—ã —Ñ–æ—Ç–æ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
    media_group = []
    
    for photo_path in photo_paths:
        filename = os.path.basename(photo_path)
        with open(photo_path, 'rb') as f:
            media_group.append(
                InputMediaPhoto(
                    media=BufferedInputFile(
                        file=f.read(),
                        filename=filename
                    )
                )
            )
    
    await bot.send_media_group(chat_id=message.chat.id, media=media_group)

async def _send_videos_as_group(message: Message, video_paths: list, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä—É–ø–ø—ã –≤–∏–¥–µ–æ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
    media_group = []
    
    for video_path in video_paths:
        file_size = os.path.getsize(video_path) / (1024 * 1024)  # MB
        
        if file_size > MAX_TELEGRAM_VIDEO_SIZE:
            await message.answer(f"üì¶ –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ ({file_size:.1f}MB) –∏ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            continue
        
        filename = os.path.basename(video_path)
        with open(video_path, 'rb') as f:
            media_group.append(
                InputMediaVideo(
                    media=BufferedInputFile(
                        file=f.read(),
                        filename=filename
                    )
                )
            )
    
    if media_group:  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
        await bot.send_media_group(chat_id=message.chat.id, media=media_group)

async def _send_single_photo(message: Message, photo_path: str, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ"""
    filename = os.path.basename(photo_path)
    with open(photo_path, 'rb') as f:
        await bot.send_photo(
            chat_id=message.chat.id,
            photo=BufferedInputFile(
                file=f.read(),
                filename=filename
            )
        )

async def _send_single_video(message: Message, video_path: str, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞–∑–º–µ—Ä–∞"""
    file_size = os.path.getsize(video_path) / (1024 * 1024)  # MB
    
    if file_size > MAX_TELEGRAM_VIDEO_SIZE:
        await message.answer(f"üì¶ –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ ({file_size:.1f}MB)")
        return
    
    filename = os.path.basename(video_path)
    with open(video_path, 'rb') as f:
        await bot.send_video(
            chat_id=message.chat.id,
            video=BufferedInputFile(
                file=f.read(),
                filename=filename
            )
        )