from aiogram.types import Message, BufferedInputFile,InputMediaPhoto
from services.instagram import InstagramDownloader
from config import DOWNLOAD_DIR, MAX_FILE_SIZE, MAX_TELEGRAM_VIDEO_SIZE
import os
import logging
import asyncio
from aiogram import Bot

logger = logging.getLogger(__name__)

downloader = InstagramDownloader()

async def handle_instagram(message: Message, url: str, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Instagram —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º –º–µ–¥–∏–∞"""
    try:
        status_msg = await message.answer("üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ (–¥–æ 500 —Å–µ–∫.)..")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ
        result, status = await downloader.download_content(url, merge_all=False)
        
        if not result['media']:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {status}")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
        if result['text']:
            with open(result['text'][0], 'r', encoding='utf-8') as f:
                text = f.read()
                # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
                for i in range(0, len(text), 4000):
                    await message.answer(f"üìù –¢–µ–∫—Å—Ç {'(–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ)' if i > 0 else ''}:\n{text[i:i+4000]}")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–æ–π
        photos = [f for f in result['media'] if os.path.basename(f).lower().endswith(('.jpg', '.jpeg', '.png'))]
        videos = [f for f in result['media'] if os.path.basename(f).lower().endswith(('.mp4', '.mov'))]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–æ–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if photos:
            try:
                await _send_photos_as_group(message, photos, bot)
            except Exception as e:
                logger.error(f"Failed to send photos: {str(e)}")
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –≥—Ä—É–ø–ø–æ–π, –ø—Ä–æ–±—É–µ–º –ø–æ –æ–¥–Ω–æ–º—É
                for photo in photos:
                    try:
                        await _send_single_photo(message, photo, bot)
                    except Exception as e:
                        logger.error(f"Failed to send photo {photo}: {str(e)}")
                    finally:
                        await downloader._safe_remove_file(photo)
            finally:
                for photo in photos:
                    await downloader._safe_remove_file(photo)
        
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –ø–æ –æ–¥–Ω–æ–º—É
        for video in videos:
            try:
                await _send_single_video(message, video, bot)
            except Exception as e:
                logger.error(f"Failed to send video {video}: {str(e)}")
            finally:
                await downloader._safe_remove_file(video)
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        if result['text']:
            await downloader._safe_remove_file(result['text'][0])
        
        await message.bot.delete_message(message.chat.id, status_msg.message_id)
        
    except Exception as e:
        logger.critical(f"Fatal error: {str(e)}", exc_info=True)
        await message.answer("üí• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")

async def _send_photos_as_group(message: Message, photo_paths: list, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä—É–ø–ø—ã —Ñ–æ—Ç–æ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
    media_group = []
    
    for photo_path in photo_paths:
        filename = os.path.basename(photo_path)
        with open(photo_path, 'rb') as f:
            media_group.append(
                InputMediaPhoto(
                    media=BufferedInputFile(
                        file=f.read(),
                        filename=filename
                    )
                )
            )
    
    await bot.send_media_group(chat_id=message.chat.id, media=media_group)

async def _send_single_photo(message: Message, photo_path: str, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ"""
    filename = os.path.basename(photo_path)
    with open(photo_path, 'rb') as f:
        await bot.send_photo(
            chat_id=message.chat.id,
            photo=BufferedInputFile(
                file=f.read(),
                filename=filename
            )
        )

async def _send_single_video(message: Message, video_path: str, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞–∑–º–µ—Ä–∞"""
    file_size = os.path.getsize(video_path) / (1024 * 1024)  # MB
    
    if file_size > MAX_TELEGRAM_VIDEO_SIZE:
        await message.answer(f"üì¶ –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ ({file_size:.1f}MB)")
        return
    
    filename = os.path.basename(video_path)
    with open(video_path, 'rb') as f:
        await bot.send_video(
            chat_id=message.chat.id,
            video=BufferedInputFile(
                file=f.read(),
                filename=filename
            )
        )
