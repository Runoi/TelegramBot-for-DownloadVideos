from aiogram.types import Message, BufferedInputFile
from services.instagram import InstagramDownloader
from config import DOWNLOAD_DIR, MAX_TELEGRAM_VIDEO_SIZE
import os
import logging
import asyncio

logger = logging.getLogger(__name__)
downloader = InstagramDownloader()

async def handle_instagram_post(message: Message, url: str):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Instagram"""
    try:
        if not url or not url.strip():
            await message.answer("‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞")
            return

        status_msg = await message.answer("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        content, status = await downloader.download_content(url)
        
        if not content.get('media'):
            await message.answer(f"‚ùå {status}")
            return

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
        for file in content['media']:
            if file and isinstance(file, str) and os.path.exists(file):
                try:
                    await send_media_to_telegram(message, file)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {file}: {e}")
                finally:
                    await downloader.cleanup_file(file)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞
        if content.get('text') and content['text'][0]:
            await send_post_text(message, content['text'][0])
            await downloader.cleanup_file(content['text'][0])

        await message.bot.delete_message(
            chat_id=message.chat.id,
            message_id=status_msg.message_id
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

async def send_media_to_telegram(message: Message, file_path: str):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞"""
    try:
        if not file_path or not os.path.exists(file_path):
            logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return

        file_size = os.path.getsize(file_path) / (1024 * 1024)  # MB
        
        if file_size > MAX_TELEGRAM_VIDEO_SIZE:
            await message.answer(f"üì¶ –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({file_size:.1f}MB)")
            return

        with open(file_path, 'rb') as f:
            file_data = f.read()
            filename = os.path.basename(file_path)
            
            if filename.lower().endswith(('.mp4', '.mov')):
                await message.answer_video(
                    BufferedInputFile(file_data, filename)
                )
            else:
                await message.answer_photo(
                    BufferedInputFile(file_data, filename)
                )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞: {str(e)}")
        raise

async def send_post_text(message: Message, text_file: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
    if not text_file or not os.path.exists(text_file):
        logger.warning(f"–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {text_file}")
        return

    try:
        with open(text_file, 'r', encoding='utf-8') as f:
            text = f.read()
            if not text.strip():
                return
                
            for i in range(0, len(text), 4000):
                await message.answer(
                    f"üìù {'(–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ)' if i > 0 else ''}\n{text[i:i+4000]}"
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {str(e)}")