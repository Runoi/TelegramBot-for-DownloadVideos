from aiogram.types import Message, BufferedInputFile
from services.instagram import InstagramDownloader
from config import DOWNLOAD_DIR, MAX_FILE_SIZE, MAX_TELEGRAM_VIDEO_SIZE
import os
import logging
import asyncio

logger = logging.getLogger(__name__)

downloader = InstagramDownloader()

async def handle_instagram(message: Message, url: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Instagram —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º –º–µ–¥–∏–∞"""
    try:
        status_msg = await message.answer("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–Ω—Ç–µ–Ω—Ç...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ
        result, status = await downloader.download_content(url, merge_all=True)
        
        if not result['media']:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {status}")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
        if result['text']:
            with open(result['text'][0], 'r', encoding='utf-8') as f:
                text = f.read()
                # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
                for i in range(0, len(text), 4000):
                    await message.answer(f"üìù –¢–µ–∫—Å—Ç {'(–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ)' if i > 0 else ''}:\n{text[i:i+4000]}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã
        for file in result['media']:
            try:
                await _send_media_file(message, file)
            except Exception as e:
                logger.error(f"Failed to send file {file}: {str(e)}")
            finally:
                await downloader._safe_remove_file(file)
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        if result['text']:
            await downloader._safe_remove_file(result['text'][0])
        
        await message.bot.delete_message(message.chat.id, status_msg.message_id)
        
    except Exception as e:
        logger.critical(f"Fatal error: {str(e)}", exc_info=True)
        await message.answer("üí• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")

async def _send_media_file(message: Message, file_path: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞–∑–º–µ—Ä–∞"""
    file_size = os.path.getsize(file_path) / (1024 * 1024)  # MB
    
    if file_size > MAX_TELEGRAM_VIDEO_SIZE:
        await message.answer(f"üì¶ –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({file_size:.1f}MB)")
        return
        
    with open(file_path, 'rb') as f:
        file_data = f.read()
        filename = os.path.basename(file_path)
        
        if filename.lower().endswith(('.mp4', '.mov')):
            await message.answer_video(BufferedInputFile(file_data, filename))
        else:
            await message.answer_photo(BufferedInputFile(file_data, filename))

async def _safe_remove_file(path: str):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
    try:
        if path and os.path.exists(path):
            os.remove(path)
    except Exception as e:
        logger.error(f"Failed to remove file: {str(e)}")