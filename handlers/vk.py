from services.vk_parser import vk_parser
from aiogram import types
import logging

logger = logging.getLogger(__name__)

async def handle_vk_post(message: types.Message, url: str):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ VK –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    try:
        await message.answer("‚è≥ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ VK...")
        data = await vk_parser.parse_vk_url(url)
        
        if not data:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É.")

        if data['type'] == 'video':
            await _handle_vk_media(message, data, is_video=True)
        elif data['type'] == 'post':
            await _handle_vk_wall_post(message, data)
        else:
            raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
            
    except Exception as e:
        logger.error(f"VK error: {str(e)}", exc_info=True)
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ VK: {str(e)}")

async def _handle_vk_media(message: types.Message, data: dict, is_video: bool):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ/–∫–ª–∏–ø–æ–≤"""
    try:
        media_type = "–≤–∏–¥–µ–æ" if is_video else "–∫–ª–∏–ø"
        
        if data.get('thumb'):
            await message.answer_photo(
                data['thumb'],
                caption=f"üé• {data.get('title', media_type.capitalize() + ' VK')}"
            )
        
        if data.get('url'):
            await message.answer(f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ {media_type}:\n{data['url']}")
        else:
            raise ValueError(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ {media_type}")
            
    except Exception as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {media_type}: {str(e)}")

async def _handle_vk_wall_post(message: types.Message, data: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–æ–≤"""
    try:
        if data.get('text'):
            await message.answer(f"üìù –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:\n\n{data['text']}")
        
        if not data.get('attachments'):
            await message.answer("‚ÑπÔ∏è –í –ø–æ—Å—Ç–µ –Ω–µ—Ç –º–µ–¥–∏–∞–≤–ª–æ–∂–µ–Ω–∏–π")
            return
            
        for attach in data['attachments']:
            if attach['type'] == 'photo':
                await message.answer_photo(attach['url'])
            elif attach['type'] == 'video':
                await message.answer(f"üé• –í–∏–¥–µ–æ –≤ –ø–æ—Å—Ç–µ: {attach['url']}")
                
    except Exception as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–∞: {str(e)}")