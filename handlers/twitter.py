from aiogram import types, Bot
from aiogram.types import BufferedInputFile, InputMediaPhoto
from services.downloader import download_image, download_twitter_video
import logging
import os
from config import MAX_FILE_SIZE
from services.utils import compress_video
from services.twitter import TwitterService
import asyncio
from typing import List

logger = logging.getLogger(__name__)

class TwitterHandler:
    MAX_IMAGES = 4  # –õ–∏–º–∏—Ç Telegram –Ω–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
    MAX_IMAGE_SIZE = 10 * 1024 * 1024  # 10MB

    async def handle_post(self, message: types.Message, url: str, bot: Bot):
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Twitter-–ø–æ—Å—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Twitter-–ø–æ—Å—Ç–∞: {url}")
            
            # 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            twitter_service = TwitterService()
            content, error = await twitter_service.get_twitter_content(url)
            
            if error or not content:
                error_msg = error or "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç"
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {error_msg}")
                raise ValueError(error_msg)

            logger.debug(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {content}")

            # 2. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if content.get('text'):
                try:
                    await self._send_text(message, content['text'])
                    logger.debug("–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                except Exception as text_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞: {str(text_error)}")

            # 3. –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞
            if content.get('media'):
                try:
                    await self._handle_media(
                        message, 
                        content['media'], 
                        content.get('type', ''), 
                        bot
                    )
                    logger.debug("–ú–µ–¥–∏–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                except Exception as media_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞: {str(media_error)}")
                    await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç")

            logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

        except ValueError as ve:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π: {str(ve)}")
            await message.answer(f"‚ùå {str(ve)}")
        except Exception as e:
            logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}", exc_info=True)
            await message.answer("üí• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Å—Ç–∞")
        finally:
            # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            if 'twitter_service' in locals():
                await twitter_service._close_driver()

    async def _send_text(self, message: types.Message, text: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        if len(text) > 4000:
            text = text[:4000] + "... [—Ç–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω]"
        await message.answer(f"–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:\n{text}")

    async def _handle_media(self, message: types.Message, media: dict, post_type: str, bot: Bot):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞. –¢–∏–ø: {post_type}, –¥–∞–Ω–Ω—ã–µ: {media.keys()}")

            # 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if media.get('images'):
                logger.debug(f"–ù–∞–π–¥–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {len(media['images'])} —à—Ç.")
                try:
                    await self._handle_images(message, media['images'], bot)
                    logger.info("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
                except Exception as img_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {str(img_error)}", exc_info=True)
                    await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

            # 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–∏–ø –ø–æ—Å—Ç–∞ - –≤–∏–¥–µ–æ –∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∏)
            if post_type == 'video' and media.get('videos'):
                logger.debug(f"–ù–∞–π–¥–µ–Ω—ã –≤–∏–¥–µ–æ: {len(media['videos'])} —à—Ç.")
                if not media['videos'][0]:
                    logger.warning("–ü—É—Å—Ç–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ")
                    return

                try:
                    await self._handle_video(message, media['videos'][0], bot)
                    logger.info("–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                except Exception as video_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ: {str(video_error)}", exc_info=True)
                    await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ")

        except Exception as e:
            logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ _handle_media: {str(e)}", exc_info=True)
            await message.answer("üí• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞")
        finally:
            logger.debug("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞")

    async def _handle_images(self, message: types.Message, image_urls: List[str], bot: Bot):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∞–≤–∞—Ç–∞—Ä–æ–∫"""
        if not image_urls:
            return

        downloaded_images = []
        try:
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å—Ç–∞ (–Ω–µ –∞–≤–∞—Ç–∞—Ä–∫–∏)
            filtered_urls = [
                url for url in image_urls 
                if '/media/' in url and not any(x in url for x in ['_normal.', '_bigger.', '_mini.'])
            ]

            if not filtered_urls:
                logger.warning("No valid post images found, only profile avatars")
                return

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–µ –±–æ–ª–µ–µ MAX_IMAGES)
            for url in filtered_urls[:self.MAX_IMAGES]:
                try:
                    image_path = await download_image(url)
                    if image_path and os.path.getsize(image_path) <= self.MAX_IMAGE_SIZE:
                        downloaded_images.append(image_path)
                except Exception as e:
                    logger.error(f"Error downloading image {url}: {str(e)}")
                    continue

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
            if downloaded_images:
                media_group = []
                for img_path in downloaded_images:
                    with open(img_path, 'rb') as f:
                        media_group.append(InputMediaPhoto(
                            media=BufferedInputFile(f.read(), os.path.basename(img_path))
                        ))
                
                await bot.send_media_group(chat_id=message.chat.id, media=media_group)

        finally:
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            for img_path in downloaded_images:
                try:
                    if os.path.exists(img_path):
                        os.remove(img_path)
                except:
                    pass

    async def _handle_video(self, message: types.Message, video_url: str, bot: Bot):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        video_path = None
        compressed_path = None
        
        try:
            # 1. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
            logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ: {video_url}")
            
            # 2. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
            try:
                video_path = await download_twitter_video(video_url, message, bot)
                if not video_path or not os.path.exists(video_path):
                    raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ")
                logger.debug(f"–í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ: {video_path} ({os.path.getsize(video_path)/1024/1024:.2f} MB)")
            except Exception as download_error:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: {str(download_error)}")
                raise ValueError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ —Å Twitter")

            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –≤–∏–¥–µ–æ
            original_size = os.path.getsize(video_path)
            needs_compression = original_size > MAX_FILE_SIZE
            
            if needs_compression:
                logger.info(f"–í–∏–¥–µ–æ —Ç—Ä–µ–±—É–µ—Ç —Å–∂–∞—Ç–∏—è (—Ä–∞–∑–º–µ—Ä: {original_size/1024/1024:.2f} MB)")
                compressed_path = f"{video_path}_compressed.mp4"
                
                try:
                    success = await compress_video(video_path, compressed_path)
                    if not success or not os.path.exists(compressed_path):
                        raise ValueError("–û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è –≤–∏–¥–µ–æ")
                    
                    compressed_size = os.path.getsize(compressed_path)
                    logger.debug(f"–í–∏–¥–µ–æ —Å–∂–∞—Ç–æ: {compressed_size/1024/1024:.2f} MB")
                    
                    if compressed_size > MAX_FILE_SIZE:
                        raise ValueError(f"–í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –ø–æ—Å–ª–µ —Å–∂–∞—Ç–∏—è ({compressed_size/1024/1024:.2f} MB)")
                    
                    # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª, –µ—Å–ª–∏ —Å–∂–∞—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ
                    try:
                        os.remove(video_path)
                        video_path = compressed_path
                    except Exception as remove_error:
                        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞: {str(remove_error)}")
                        raise ValueError("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ")
                        
                except Exception as compression_error:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è: {str(compression_error)}")
                    if compressed_path and os.path.exists(compressed_path):
                        try:
                            os.remove(compressed_path)
                        except:
                            pass
                    raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∏–¥–µ–æ")

            # 4. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ –≤ Telegram
            try:
                with open(video_path, 'rb') as f:
                    await bot.send_video(
                        chat_id=message.chat.id,
                        video=BufferedInputFile(
                            f.read(),
                            filename="twitter_video.mp4"
                        ),
                        caption="–í–∏–¥–µ–æ –∏–∑ Twitter, @prorusaver_bot",
                        supports_streaming=True,
                        width=1280,  # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
                        height=720,
                        parse_mode="HTML"
                    )
                logger.info("–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                
            except Exception as send_error:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: {str(send_error)}")
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ")

        except ValueError as ve:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ: {str(ve)}")
            await message.answer(f"‚ùå {str(ve)}")
        except Exception as e:
            logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
            await message.answer("üí• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ")
        finally:
            # 5. –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            for path in [video_path, compressed_path]:
                if path and os.path.exists(path):
                    try:
                        os.remove(path)
                        logger.debug(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {path}")
                    except Exception as clean_error:
                        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {path}: {str(clean_error)}")

twitter_handler = TwitterHandler()

async def handle_twitter_post(message: types.Message, url: str, bot: Bot):
    await twitter_handler.handle_post(message, url, bot)