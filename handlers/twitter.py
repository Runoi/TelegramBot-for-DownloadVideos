from aiogram import types
from aiogram.types import BufferedInputFile
from services.twitter_parser import TwitterParser
from services.downloader import download_twitter_video
from handlers.media import send_media_group
import logging
import html
import os
from config import MAX_FILE_SIZE
from services.utils import compress_video

logger = logging.getLogger(__name__)

class TwitterHandler:
    def __init__(self):
        self.parser = TwitterParser()

    async def handle_post(self, message: types.Message, url: str):
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Twitter –ø–æ—Å—Ç–æ–≤"""
        try:
            await message.answer("‚è≥ –ü–æ–ª—É—á–∞—é –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ Twitter...")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Selenium
            content = await self.parser.get_twitter_content(url)
            
            if not content:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞
            if content.get('text'):
                await self._send_text(message, content['text'])
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞
            await self._handle_media(message, content.get('media', {}))
            
        except Exception as e:
            logger.error(f"Twitter error: {str(e)}", exc_info=True)
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def _send_text(self, message: types.Message, text: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞"""
        safe_text = text
        await message.answer(
            f"üìù <b>–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:</b>\n{safe_text}",
            parse_mode="HTML"
        )

    async def _handle_media(self, message: types.Message, media: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        if not media:
            return

        # –í–∏–¥–µ–æ –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        if media.get('videos'):
            await self._handle_video(message, media['videos'][0])
        
        # –ó–∞—Ç–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if media.get('images'):
            await send_media_group(message, media['images'], [])
    async def _handle_video(self, message: types.Message, video_url: str):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ Twitter –≤–∏–¥–µ–æ"""
        try:
            await message.answer("‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã")
            
            # –ü—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ
            video_path = await download_twitter_video(video_url)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = os.path.getsize(video_path)
            if file_size > MAX_FILE_SIZE:
                compressed_path = f"{video_path}_compressed.mp4"
                await message.answer("‚ö†Ô∏è –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ, –ø—Ä–æ–±—É—é —Å–∂–∞—Ç—å...")
                
                if await compress_video(video_path, compressed_path):
                    if os.path.getsize(compressed_path) <= MAX_FILE_SIZE:
                        os.remove(video_path)
                        video_path = compressed_path
                    else:
                        os.remove(compressed_path)
                        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∂–∞—Ç—å –≤–∏–¥–µ–æ –¥–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
            with open(video_path, 'rb') as f:
                await message.answer_video(
                    video=BufferedInputFile(
                        f.read(),
                        filename="twitter_video.mp4"
                    ),
                    caption="üé• –í–∏–¥–µ–æ –∏–∑ Twitter"
                )
                
        except Exception as e:
            logger.error(f"Video handling error: {str(e)}")
            await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∏–¥–µ–æ: {str(e)}")
            
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –ø—Ä–µ–≤—å—é
            try:
                if 'video_url' in locals():
                    await message.answer(f"–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ: {video_url}")
            except:
                pass
        finally:
            if 'video_path' in locals() and os.path.exists(video_path):
                os.remove(video_path)
    # –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
twitter_handler = TwitterHandler()

async def handle_twitter_post(message: types.Message, url: str):
    """–ü—É–±–ª–∏—á–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Twitter"""
    await twitter_handler.handle_post(message, url)