from aiogram import types, Bot
from aiogram.types import BufferedInputFile, InputMediaPhoto
from services.downloader import download_image, download_twitter_video
import logging
import os
from config import MAX_FILE_SIZE
from services.utils import compress_video
from services.twitter import TwitterService
import asyncio
from typing import List

logger = logging.getLogger(__name__)

class TwitterHandler:
    MAX_IMAGES = 4  # –õ–∏–º–∏—Ç Telegram –Ω–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
    MAX_IMAGE_SIZE = 10 * 1024 * 1024  # 10MB

    async def handle_post(self, message: types.Message, url: str, bot: Bot):
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Twitter-–ø–æ—Å—Ç–∞"""
        try:
            twitter_service = TwitterService()
            content, error = await twitter_service.get_twitter_content(url)
            if error or not content:
                raise ValueError(error or "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞
            if content.get('text'):
                await self._send_text(message, content['text'])

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞
            if content.get('media'):
                await self._handle_media(message, content['media'], content.get('type', ''), bot)

        except Exception as e:
            logger.error(f"Twitter error: {str(e)}", exc_info=True)
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def _send_text(self, message: types.Message, text: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        if len(text) > 4000:
            text = text[:4000] + "... [—Ç–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω]"
        await message.answer(f"üìù <b>–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:</b>\n{text}", parse_mode="HTML")

    async def _handle_media(self, message: types.Message, media: dict, post_type: str, bot: Bot):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞"""
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            if media.get('images'):
                await self._handle_images(message, media['images'], bot)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–∏–ø –ø–æ—Å—Ç–∞ - –≤–∏–¥–µ–æ)
            if post_type == 'video' and media.get('videos'):
                await self._handle_video(message, media['videos'][0], bot)

        except Exception as e:
            logger.error(f"Media error: {str(e)}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –º–µ–¥–∏–∞: {str(e)}")

    async def _handle_images(self, message: types.Message, image_urls: List[str], bot: Bot):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∞–≤–∞—Ç–∞—Ä–æ–∫"""
        if not image_urls:
            return

        downloaded_images = []
        try:
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å—Ç–∞ (–Ω–µ –∞–≤–∞—Ç–∞—Ä–∫–∏)
            filtered_urls = [
                url for url in image_urls 
                if '/media/' in url and not any(x in url for x in ['_normal.', '_bigger.', '_mini.'])
            ]

            if not filtered_urls:
                logger.warning("No valid post images found, only profile avatars")
                return

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–µ –±–æ–ª–µ–µ MAX_IMAGES)
            for url in filtered_urls[:self.MAX_IMAGES]:
                try:
                    image_path = await download_image(url)
                    if image_path and os.path.getsize(image_path) <= self.MAX_IMAGE_SIZE:
                        downloaded_images.append(image_path)
                except Exception as e:
                    logger.error(f"Error downloading image {url}: {str(e)}")
                    continue

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
            if downloaded_images:
                media_group = []
                for img_path in downloaded_images:
                    with open(img_path, 'rb') as f:
                        media_group.append(InputMediaPhoto(
                            media=BufferedInputFile(f.read(), os.path.basename(img_path))
                        ))
                
                await bot.send_media_group(chat_id=message.chat.id, media=media_group)

        finally:
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            for img_path in downloaded_images:
                try:
                    if os.path.exists(img_path):
                        os.remove(img_path)
                except:
                    pass

    async def _handle_video(self, message: types.Message, video_url: str, bot: Bot):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ"""
        video_path = None
        compressed_path = None
        
        try:
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
            video_path = await download_twitter_video(video_url, message, bot)
            if not video_path or not os.path.exists(video_path):
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∏ —Å–∂–∞—Ç–∏–µ
            if os.path.getsize(video_path) > MAX_FILE_SIZE:
                compressed_path = f"{video_path}_compressed.mp4"
                if await compress_video(video_path, compressed_path):
                    if os.path.exists(compressed_path) and os.path.getsize(compressed_path) <= MAX_FILE_SIZE:
                        os.remove(video_path)
                        video_path = compressed_path
                    else:
                        if compressed_path and os.path.exists(compressed_path):
                            os.remove(compressed_path)
                        raise ValueError("–í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –ø–æ—Å–ª–µ —Å–∂–∞—Ç–∏—è")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ
            with open(video_path, 'rb') as f:
                await bot.send_video(
                    chat_id=message.chat.id,
                    video=BufferedInputFile(f.read(), "twitter_video.mp4"),
                    caption="üé• –í–∏–¥–µ–æ –∏–∑ Twitter",
                    supports_streaming=True
                )

        except Exception as e:
            logger.error(f"Video error: {str(e)}")
            raise
        finally:
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            for path in [video_path, compressed_path]:
                if path and os.path.exists(path):
                    try:
                        os.remove(path)
                    except:
                        pass

twitter_handler = TwitterHandler()

async def handle_twitter_post(message: types.Message, url: str, bot: Bot):
    await twitter_handler.handle_post(message, url, bot)