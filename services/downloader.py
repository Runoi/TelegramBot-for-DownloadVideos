import os
import re
import asyncio
import logging
import glob
import time
import yt_dlp
from typing import Optional
from pathlib import Path
from aiogram import Bot, types
from concurrent.futures import ThreadPoolExecutor
from config import DOWNLOAD_DIR, MAX_FILE_SIZE, PLATFORMS
from services.utils import compress_video
from yt_dlp import YoutubeDL

logger = logging.getLogger(__name__)

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
DOWNLOAD_SEMAPHORE = asyncio.Semaphore(3)

class DownloadLogger:
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è yt-dlp"""
    def debug(self, msg):
        if msg.startswith('[download]'):
            logger.info(f"YT-DLP: {msg}")

    def warning(self, msg):
        logger.warning(f"YT-DLP: {msg}")

    def error(self, msg):
        logger.error(f"YT-DLP: {msg}")

class DownloadProgressHook:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏"""
    def __init__(self, message: types.Message, bot: Bot):
        self.message = message
        self.bot = bot
        self.last_update = 0
        self.start_time = time.time()

    async def progress_hook(self, d):
        if d['status'] == 'downloading':
            now = time.time()
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 3 —Å–µ–∫—É–Ω–¥—ã
            if now - self.last_update > 3 or d['_percent_str'] == '100.0%':
                self.last_update = now
                try:
                    percent = float(d['_percent_str'].replace('%', ''))
                    progress_bar = self._create_progress_bar(percent)
                    elapsed = int(now - self.start_time)
                    
                    text = (
                        f"‚è≥ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ...\n\n"
                        f"{progress_bar} {d['_percent_str']}\n"
                        f"‚è± –í—Ä–µ–º—è: {elapsed} —Å–µ–∫\n"
                        f"üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: {d['_speed_str']}\n"
                        f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {d['_eta_str']}"
                    )
                    
                    await self.bot.edit_message_text(
                        text,
                        chat_id=self.message.chat.id,
                        message_id=self.message.message_id
                    )
                except Exception as e:
                    logger.error(f"Progress update error: {e}")

    def _create_progress_bar(self, percent, length=10):
        filled = int(length * percent // 100)
        return '‚¨ú' * filled + '‚¨õ' * (length - filled)

def get_ydl_opts(url: str, platform: str = None) -> dict:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º"""
    base_opts = {
        'outtmpl': os.path.join(DOWNLOAD_DIR, '%(title)s.%(ext)s'),
        'retries': 3,
        'fragment_retries': 3,
        'skip_unavailable_fragments': True,
        'merge_output_format': 'mp4',
        'logger': DownloadLogger(),
        'windows_filenames': True,
        'restrictfilenames': True,
        'nooverwrites': True,
        'continuedl': True,
        'noprogress': True,
        'concurrent_fragment_downloads': 2,
        'http_headers': {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)',
            'Accept-Language': 'en-US,en;q=0.9'
        }
    }

    if not platform:
        if re.search(r"(youtube\.com|youtu\.be)", url, re.IGNORECASE):
            platform = 'youtube'
        elif re.search(r"instagram\.com", url, re.IGNORECASE):
            platform = 'instagram'
        elif re.search(r"(x\.com|twitter\.com)", url, re.IGNORECASE):
            platform = 'twitter'
        elif re.search(r"vk\.com", url, re.IGNORECASE):
            platform = 'vk'

    if platform == 'youtube':
        base_opts.update({
            'format': 'bv*[height<=720][ext=mp4]+ba/b[height<=720]',
            'throttled_rate': '2M'
        })
    elif platform == 'instagram':
        base_opts.update({
            'format': 'bestvideo+bestaudio/best',
            'extractor_args': {'instagram': {'post': {'format': 'video'}}}
        })
    elif platform == 'twitter':
        base_opts.update({
            'format': 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best',
            'extractor_args': {
                'twitter': {
                    'username': os.getenv('TWITTER_USERNAME'),
                    'password': os.getenv('TWITTER_PASSWORD')
                }
            },
            'throttled_rate': '1M'
        })
    elif platform == 'vk':
        base_opts.update({
            'referer': 'https://vk.com/',
            'format': 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best'
        })

    return base_opts

async def download_video(url: str, message: types.Message, bot: Bot, timeout: int = 300) -> str:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    async with DOWNLOAD_SEMAPHORE:
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
            os.makedirs(DOWNLOAD_DIR, exist_ok=True)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            progress_msg = await bot.send_message(
                message.chat.id,
                "üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ..."
            )
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
            platform = None
            if 'twitter.com' in url or 'x.com' in url:
                platform = 'twitter'
            elif 'vk.com' in url:
                platform = 'vk'
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ö—É–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            progress_hook = DownloadProgressHook(progress_msg, bot)
            ydl_opts = get_ydl_opts(url, platform)
            ydl_opts['progress_hooks'] = [lambda d: asyncio.create_task(progress_hook.progress_hook(d))]

            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            def sync_download():
                with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                    info = ydl.extract_info(url, download=True)
                    return ydl.prepare_filename(info)

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            filename = await asyncio.wait_for(
                asyncio.to_thread(sync_download),
                timeout=timeout
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if not os.path.exists(filename):
                files = find_video_files(DOWNLOAD_DIR)
                if files:
                    filename = files[0]
                else:
                    raise FileNotFoundError("–í–∏–¥–µ–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.edit_message_text(
                "‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ...",
                chat_id=progress_msg.chat.id,
                message_id=progress_msg.message_id
            )

            return filename

        except asyncio.TimeoutError:
            await bot.edit_message_text(
                "‚è± –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏",
                chat_id=progress_msg.chat.id,
                message_id=progress_msg.message_id
            )
            raise ValueError("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏")
        except yt_dlp.DownloadError as e:
            await bot.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ",
                chat_id=progress_msg.chat.id,
                message_id=progress_msg.message_id
            )
            raise ValueError(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
        except Exception as e:
            await bot.edit_message_text(
                f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}",
                chat_id=progress_msg.chat.id,
                message_id=progress_msg.message_id
            )
            raise
        finally:
            clean_temp_files(DOWNLOAD_DIR)

def find_video_files(directory: str, prefix: str = None) -> list:
    """–ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    video_files = []
    for root, _, files in os.walk(directory):
        for file in files:
            if file.endswith(('.mp4', '.mkv', '.webm')):
                if prefix and not file.startswith(prefix):
                    continue
                video_files.append(os.path.join(root, file))
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    video_files.sort(key=lambda x: os.path.getmtime(x), reverse=True)
    return video_files

def clean_temp_files(directory: str):
    """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    for pattern in ['*.part', '*.ytdl', '*.tmp']:
        for file in glob.glob(os.path.join(directory, pattern)):
            try:
                os.remove(file)
            except Exception:
                pass

async def download_twitter_video(url: str, message: types.Message, bot: Bot, timeout: int = 240) -> str:
    """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è Twitter"""
    return await download_video(url, message, bot, timeout)

async def download_vk_video(url: str, message: types.Message, bot: Bot, timeout: int = 240) -> str:
    """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è VK"""
    return await download_video(url, message, bot, timeout)